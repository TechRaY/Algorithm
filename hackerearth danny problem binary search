https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/danny/description/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int find(long a[],int i,long val)
    {
        int low=i+1;
        int high=a.length-1;
        int ans=-1;
        
        while(low<=high)
        {
            int mid=(low+high)/2;
            
            if(a[mid]<=val)    
            {
                low=mid+1;
                ans=mid;
            }
            else
            {
                high=mid-1;
            }
        }
        
        if(ans==-1)
        return 0;
        else
        return ans-i;    
    }    
    
    public static void main(String[] args) 
    {
             Scanner sc=new Scanner(System.in);
             
             int xlen=sc.nextInt();  
             long pos=sc.nextLong();     
            
             long a[]=new long[xlen];
            
             for(int i=0;i<xlen;i++)
             {
                 a[i]=sc.nextLong();
             }
             
             Arrays.sort(a);   
             long low=0;
             long high=a[xlen-1]-a[0];
             long ans=0;
        
            while(low<=high)
            {
                long an=0;
                long mid=(high+low)/2;
                
                for(int i=0;i<xlen;i++)
                {
                    an+=find(a,i,a[i]+mid);
                }
                
                if(an<pos)
                {
                    low=mid+1;
                }
                else
                {
                    ans=mid;    
                    high=mid-1;
                }   
                
            }
        
          System.out.println(ans);
        
        
    }
}
