//https://www.codechef.com/SEPT17/problems/FILLMTR

//  Do write the fast scanner

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
 
 
  class rajeevgraph{
    
        boolean done = false;
        HashMap<Integer,ArrayList<Integer>> hm = new HashMap();
        HashMap<Integer,Boolean> visited = new HashMap();
        HashMap<Integer,Integer> color = new HashMap();
    
    
    void dfs(int v,int coloror)
    {
        if(done)
        return;
        
        visited.put(v,true);
        color.put(v,coloror);
        
        int dcoloror = 1 - coloror;
        for(int i : hm.get(v))
        {
            if(done)
                return;
            
            if(visited.get(i))
            {
                if(color.get(i) == coloror)
                {
                    done = true;
                    return;
                }
            }
            else
            {
                dfs(i,dcoloror);
            }
        }
    }
    
}
 
class Solution {
 
    
	
    static int sqr[][] = new int[1000000][3];
    static int spr[] = new int[100001];
    static int q,n;
	
 
    HashMap<Integer,Node> hm = new HashMap<Integer,Node>();
	
        class Node
        {
            int data;
            int rank;
            Node parent;
        }
		
		
		
        public Node findSet(int data)
        {
            return findSet(hm.get(data));
        }
		
		
        public void makeSet(int data)
        {
            Node no = new Node();
            no.data = data;
            no.parent = no;
            no.rank = 0;
            hm.put(data,no);
        }
		
		
        public boolean union(int d1,int d2)
        {
            Node n1 = hm.get(d1);
            Node n2 = hm.get(d2);
            Node p1 = findSet(n1);
            Node p2 = findSet(n2);
            
            if(p1.data == p2.data)
                return false;
            else
            {
                if(p1.rank>p2.rank)
                {
                    p2.parent = p1;
                }
                else if(p2.rank>p1.rank)
                {
                    p1.parent = p2;
                }
                else
                {
                    p2.parent = p1;
                    p1.rank++;
                }
                return true;
            }    
        }
    
	
	
		
		
        public Node findSet(Node node)
        {
            Node par = node.parent;
            if( par == node )
                return par;
            else{
                node.parent = findSet(par);     //Yaha hota hai path comspression
                return node.parent;
                
            }
        }
		
    
    
		
    public static void main(String[] args)
    {
        int testcases = sc.nextInt();
        StringBuffer sol=new StringBuffer();
        
        while(testcases-->0)
        {
            int n = sc.nextInt();
            int q =  sc.nextInt();
            boolean fl=false;
            for(int i=0;i<q;i++)
            {
                sqr[i][0]= sc.nextInt();
                sqr[i][1]= sc.nextInt();
                sqr[i][2]= sc.nextInt();
                
                if(sqr[i][0]==sqr[i][1] && sqr[i][2]==1)
                fl = true;
                
            }
            if(fl)
            {
                sol.append("no\n");
                continue;
            }
            
            Solution s = new Solution();
            
            for(int i=1;i<=n;i++)
            s.makeSet(i);
            
            for(int i=0;i<q;i++)
            if(sqr[i][2]==0)
            s.union(sqr[i][1],sqr[i][0]);
            
            
            rajeevgraph g = new rajeevgraph();
            
            for(int i=1;i<=n;i++)
            {
                int v = s.findSet(i).data;
                spr[i] = v;
                if(!g.hm.containsKey(v))
                {
                    g.hm.put(v,new ArrayList<Integer>());
                    g.visited.put(v,false);
                }
            }    
            
            for(int i=0;i<q;i++)
            {
                if(sqr[i][2]==1)
                {
                    g.hm.get(spr[sqr[i][1]]).add(spr[sqr[i][0]]);
                    g.hm.get(spr[sqr[i][0]]).add(spr[sqr[i][1]]);
                }
            }
            
            for(int i : g.visited.keySet())
            {
               if(!g.visited.get(i))
               {
                   g.dfs(i,0);
                   if(g.done)
                   break;
               }
            }
            if(!g.done)
            sol.append("yes\n");
            else
            sol.append("no\n");
                
        }
        System.out.print(sol);
    }   
	
}
